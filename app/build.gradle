apply plugin: 'com.android.application'

android {
    compileSdkVersion 16
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "org.ebookdroid"
        minSdkVersion 8
        targetSdkVersion 16
        externalNativeBuild {
      //      cmake {
      //          //cppFlags "-std=c++11 -frtti -fexceptions"
      //          arguments "-DANDROID_STL=c++_shared"
      //      }

        ndk{
            abiFilters 'armeabi-v7a','x86'
        }
    }

     //   ndk {
     //       abiFilters 'armeabi-v7a','x86' //, 'arm64-v8a', //,'armeabi', 'x86_64',
     //     //  ldLibs "log"
     //   }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
      // sourceSets {
      //     main {
      //         jni.srcDirs = []
      //         jniLibs.srcDirs  'src/main/jni'
      //     }
      // }
    }
  //  externalNativeBuild {
  //      cmake {
  //          path '/src/main/jni/CMakeLists.txt'
  //          //arguments "-DANDROID_STL=c++_shared"
  //          // arguments '-DANDROID_PLATFORM=android-16',
  //          //         '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=c++_shared', '-DCMAKE_BUILD_TYPE=Release ..'
  //          //cFlags "-O3"  //-std=c++11
  //          //cFlags "-DHAVE_CONFIG_H","-DTHREADMODEL=POSIXTHREADS","-DDEBUGLVL=4","-D__ANDROID__"
  //      }
  //  }
    externalNativeBuild{
        ndkBuild{
            path "src/main/jni/Android.mk"
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    productFlavors {
    }

    dependencies {
        implementation 'com.android.support:support-v4:18.0.0'
        implementation files('libs/jcifs-1.3.17.jar')
}
}
